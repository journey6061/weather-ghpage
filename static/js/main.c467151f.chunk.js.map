{"version":3,"sources":["geo.js","weather.js","App.js","serviceWorker.js","index.js"],"names":["geo","props","onClick","click","className","geoinfo","weather","temp","time","detail","App","state","geos","fav","inputvalue","getInput","console","log","inputwhat","value","length","setState","geoback","val","Object","keys","map","xx","index","push","getValue","this","dropdown","fetch","then","res","json","result","results","formatted_address","location","prev","JSON","stringify","catch","error","alert","data","properties","forecast","periods","temperature","name","shortForecast","prop","geoss","key","bind","testd","type","placeholder","ref","e","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c467151f.chunk.js","sourcesContent":["import React from 'react';\nimport './geo.css'\n\nconst geo =(props)=>{\n    return(\n        <>\n        <button onClick={props.click} className='geoinfo'>\n            {props.geoinfo}\n        </button>\n        </>\n    )\n}\n\nexport default geo","import React from 'react';\nimport './weather.css'\n\nconst weather =(props)=>{\n    return(\n        <>\n        {/* <button onClick={props.click} className='geoinfo'>\n            {props.geoinfo}\n        </button> */}\n        <div className=''>\n            <span>temperature: {props.temp} / </span>\n            <span>time: {props.time} / </span>\n            <span>detail: {props.detail}</span>\n        </div>\n        </>\n    )\n}\n\nexport default weather","import React, {Component} from 'react';\nimport Geo from './geo';\nimport Weather from './weather'\nimport './App.css';\n\nclass App extends Component {\n  state={\n    weather:[],\n    geos:[],\n    geo:[],\n    fav:null,\n    inputvalue:null,\n  }\n  componentDidUpdate(){\n    if(this.state.inputvalue!==null){\n      const dropdown=[]\n      console.log(this.state.inputvalue)\n      //let sendgeo=this.state.inputvalue\n      //const geos=\n      fetch(`https://api.geocod.io/v1.4/geocode?q=${this.state.inputvalue}&api_key=25de1572225915e7eee55d929d76e4e65e61e62`)\n      .then(res=>res.json())\n      .then(result=>//console.log(result.results)\n      { /* dropdown=result.results.map((xx,index)=>\n        {return <div>\n          {xx.formatted_address}\n        </div>\n        }\n        ) */\n        console.log(result)\n        result.results.map((xx,index)=>\n        dropdown.push([xx.formatted_address, xx.location]))\n        this.setState((prev, props)=>{\n          if(JSON.stringify(dropdown)!==JSON.stringify(prev.geos)){\n            return ({\n              geos: dropdown\n            })\n          }\n        })\n      }\n      )\n      .catch((error)=>{\n        console.log('request failed', error)\n        alert('please input correct location info.')\n      })\n    } \n    if(this.state.geo.length){\n      let data=[]\n      fetch(`https://api.weather.gov/points/${this.state.geo[0]},${this.state.geo[1]}`)\n      .then(res=>res.json())\n      .then(result=>\n        //console.log(result.properties.forecast)\n        //data=result.properties.forecast\n        fetch(result.properties.forecast)\n        .then(res=>res.json())\n        .then(result=>{\n          //console.log(result.properties.periods)\n          result.properties.periods.map((xx,index)=>\n          {\n            data.push([xx.temperature, xx.name, xx.shortForecast])\n          }\n          )\n          this.setState((prev,prop)=>{\n            if(JSON.stringify(data)!==JSON.stringify(prev.weather)){\n              return ({weather:data})\n            }\n          })\n           // {weather:data})\n        }\n        )\n        .catch((error)=>\n          {console.log(error)\n            alert(`weather can't find. ${error}`)\n          }\n        )\n      )\n        .catch((error)=>\n          {console.log(error)\n            alert(`geo can't find. ${error}`)\n          }\n        )\n        //console.log(data)\n    }\n\n  }\n  \n  getInput=()=>{\n    //m1\n    //console.log(this.refs.input.value)\n    //m2\n    console.log(this.inputwhat.value.length)\n    this.setState({inputvalue:this.inputwhat.value})\n    /* if(this.inputwhat.value.length!==0){\n     this.setState({inputvalue:this.inputwhat.value})\n    }\n    else{\n      alert('please input info.')\n    } */\n  }\n  geoback=(val)=>{\n    let geo=[]\n    Object.keys(val).map((xx,index)=>\n       geo.push(val[xx])\n    )\n    console.log(geo)\n    this.setState({geo:geo})\n\n  }\n  getValue=()=>{\n\n  }\n  render(){\n    let geoss=<p>no geos info now!</p>;\n    \n    if(this.state.geos.length!==0){\n      console.log(this.state.geos)\n      geoss=this.state.geos.map((xx,index)=>{\n        return <Geo geoinfo={xx[0]}\n        key={index}\n        click={this.geoback.bind(this, xx[1])}>\n        </Geo>\n      }\n      );\n    }\n\n    let weather=<p>there's no weather info now.</p>\n\n    if(this.state.weather.length!==0){\n      const testd=this.state.weather[0]\n      /* weather=testd.map((xx, index)=>{\n        return <Weather\n        temp={xx[0]}\n        time={xx[1]}\n        detail={xx[2]}\n        >\n        </Weather>\n      }) */\n\n      weather=<Weather\n        temp={testd[0]}\n        time={testd[1]}\n        detail={testd[2]}\n        />\n      console.log(testd[1])\n      console.log(typeof this.state.weather[0])\n    }\n\n    /* let geos=<p>no geos infor</p>\n    if(this.state.geos!==null){\n      geos=this.state.geos.map((xx,index)=>{\n      <p>{xx}</p>\n      })\n    } */\n  return (\n    <>\n    <div className=\"main\">\n      <div className=\"header\">\n        weather app\n      </div>\n      <div className=\"left\">\n      </div>\n      <div className=\"mid\">\n        {/* <form>\n        <input placeholder='zip, location...' onChange={this.getInput.bind(this)}></input>\n        <input placeholder='submit' value={this.getValue()}></input>\n        </form> */}\n        {/* <form bindSubmit={this.getInput.bind(this)}>\n          <input type=\"digit\" name=\"amount\" placeholder=\"请输入金额\" />\n          <button formType=\"submit\" >提交</button>\n      </form> */}\n      {/* method1\n      <input type='text' defaultValue='zip, location...' ref=\"input\" />\n      <button type='submit' onClick={this.getInput}>submit</button> */}\n      <div className='inputarea'>\n          <input type='text' placeholder='zip, location...' \n          ref={e=>this.inputwhat=e}/>\n          <button onClick={this.getInput}>submit</button>\n      </div>\n      <div className='geo'>\n      {geoss}\n      </div>\n      <div className='weather'>\n      {weather}\n      </div>\n      </div>\n      <div className=\"right\">\n      </div>\n      <div className=\"footer\"></div>\n    </div>\n    </>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}